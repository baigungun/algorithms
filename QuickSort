package algorithm;

/**
       快速排序属于分治法的一种 .
       快速排序之所比较快，因为相比冒泡排序，每次交换是跳跃式的。
       每次排序的时候设置一个基准点，将小于等于基准点的数全部放到基准点的左边，
       将大于等于基准点的数全部放到基准点的右边。
       这样在每次交换的时候就不会像冒泡排序一样每次只能在相邻的数之间进行交换，交换的距离就大的多了。
       因此总的比较和交换次数就少了，速度自然就提高了。当然在最坏的情况下，仍可能是相邻的两个数进行了交换。
       因此快速排序的最差时间复杂度和冒泡排序是一样的都是O(N2)，它的平均时间复杂度为O(NlogN)。
       其实快速排序是基于一种叫做“二分”的思想。
 *
 */

public class Qiucksort {
	static int count = 0;
	
	//递归
	public static void quickSort(int[] arr, int low, int high) {
		int i,j,base;
		//结束条件
		if(low > high){
			return;
		}
		count++;
		//设置初始哨兵为数组第一个值
	    base = arr[low];
	    i = low;
	    j = high;
	    System.out.println("=== loop === "+count);
	    //一趟排序，将所有大于基准数的数值放在基准数右边，所有小于基准数的数值放在基准数左边
	    while (i<j) {
	    	while (arr[j]>=base && i<j) {
				j--;
			}
			
			while (arr[i]<=base && i<j) {
				i++;
			}
			
			if(i<j){
				int temp = arr[i];
				arr[i] = arr[j];
				arr[j] = temp;
			}
			
			for (int m = 0; m < arr.length; m++) {
	            System.out.print(arr[m]+" ");
	        }
		    System.out.println();
		}
		
	    //该趟排序结束之后，将基准数与结束点(i=j)的数值互换位置
	    int k = arr[i];
	    arr[i] = arr[low];
	    arr[low] = k;
	    
	    System.out.println("排序结果：");
	    for (int m = 0; m < arr.length; m++) {
            System.out.print(arr[m]+" ");
        }
	    System.out.println();
	    //左边
	    quickSort(arr, low, j-1);
	    //右边
	    quickSort(arr, j+1, high);
	    
	}
	
	public static void main(String[] args){
		int[] a={7,5,3,2,9,10,8,4,6,1};
		System.out.println("排序前： ");
		for (int i = 0; i < a.length; i++) {
            System.out.print(a[i]+" ");
        }
		System.out.println();
		quickSort(a, 0, a.length-1);
		
		System.out.println("排序后： ");
        for (int i = 0; i < a.length; i++) {
            System.out.print(a[i]+" ");
        }
		
	}

}
